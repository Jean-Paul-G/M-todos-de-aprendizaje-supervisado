import pandas as pd

# Crear el dataset con las características mencionadas
data = {
    'Nodo_Origen': ['A', 'A', 'B', 'B', 'C', 'C', 'D', 'D', 'E'],
    'Nodo_Destino': ['B', 'C', 'C', 'D', 'D', 'F', 'E', 'F', 'F'],
    'Distancia_km': [4, 5, 7, 2, 5, 3, 1, 2, 2],
    'Tiempo_Viaje_min': [10, 12, 15, 5, 10, 8, 3, 6, 5],
    'Demanda_Pasajeros': [120, 90, 150, 80, 100, 110, 60, 70, 50],
    'Nivel_Congestion': ['Medio', 'Medio', 'Alto', 'Bajo', 'Medio', 'Alto', 'Bajo', 'Medio', 'Bajo'],
    'Frecuencia_Servicio': [5, 4, 6, 8, 5, 3, 7, 4, 6]
}

# Crear un DataFrame
df = pd.DataFrame(data)

# Mostrar el dataset
print(df)

from sklearn.preprocessing import LabelEncoder

# Convertir la columna 'Nivel_Congestion' en valores numéricos
label_encoder = LabelEncoder()
df['Nivel_Congestion'] = label_encoder.fit_transform(df['Nivel_Congestion'])

# Mostrar el dataset procesado
print(df)

from sklearn.model_selection import train_test_split

# Variables de entrada (características) y salida (objetivo)
X = df[['Distancia_km', 'Demanda_Pasajeros', 'Nivel_Congestion', 'Frecuencia_Servicio']]
y = df['Tiempo_Viaje_min']

# División de datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression

# Crear el modelo de regresión lineal
modelo = LinearRegression()

# Entrenar el modelo con los datos de entrenamiento
modelo.fit(X_train, y_train)

# Mostrar los coeficientes del modelo
print(f"Coeficientes del modelo: {modelo.coef_}")

from sklearn.metrics import mean_squared_error, r2_score

# Predecir los valores del conjunto de prueba
y_pred = modelo.predict(X_test)

# Calcular y mostrar el error cuadrático medio y el coeficiente de determinación R^2
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Error Cuadrático Medio (MSE): {mse}")
print(f"Coeficiente de Determinación (R^2): {r2}")
